// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc293.DeepestSpace.subsystems;


import org.usfirst.frc293.DeepestSpace.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class BackClimber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX backClimberTalon;
    private Spark climberDriver;
    private Encoder backClimberEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Back Climber PID Parameters
    // must be tuned
    private double kF = 0;
    private double kP = 0;
    private double kI = 0;
    private double kD = 0;

    // Back Climber Setpoint (inches)
        public double[]
        hab3set = {19},
        hab2set = {6};

    // math for converting raw encoder values to inches
    public void climberSetpoint(double[] setpoints){
        backClimberTalon.set(ControlMode.MotionMagic, setpoints[0] * ((2*3.14)/1024));
    }

    public void hab3(){
        climberSetpoint(hab3set);
    }
    public void hab2(){
        climberSetpoint(hab2set);
    }

    public BackClimber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        backClimberTalon = new WPI_TalonSRX(21);
        
        
        
        climberDriver = new Spark(0);
        addChild("ClimberDriver",climberDriver);
        climberDriver.setInverted(false);
        
        backClimberEncoder = new Encoder(5, 6, false, EncodingType.k4X);
        addChild("BackClimberEncoder",backClimberEncoder);
        backClimberEncoder.setDistancePerPulse(1.0);
        backClimberEncoder.setPIDSourceType(PIDSourceType.kRate);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // back climber talon config and PID config
        backClimberTalon.setSensorPhase(true);
        backClimberTalon.clearStickyFaults();
        backClimberTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,0,4000);
        backClimberTalon.config_kP(0, kP);
        backClimberTalon.config_kI(0, kI);
        backClimberTalon.config_kD(0, kD);
        backClimberTalon.config_kF(0, kF);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

     // back climber methods
     public void backClimberDeploy(){
        backClimberTalon.set(.57);
    }
    public void backClimberRetract(){
        backClimberTalon.set(-.57);
    }
    public void backClimberStop(){
        backClimberTalon.set(0);
    }
    


}

