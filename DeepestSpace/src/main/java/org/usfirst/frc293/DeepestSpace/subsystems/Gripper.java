// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc293.DeepestSpace.subsystems;


import org.usfirst.frc293.DeepestSpace.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;


/**
 *
 */
public class Gripper extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Compressor compressor;
    private DoubleSolenoid gripper;
    private WPI_TalonSRX armTalon;
    private Solenoid pusher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double levelAngle = 95;
    private double kP = 0.05;
    private double kI = 0;
    private double kD = 0.0;

    private int potValue;
    private double testSetpoint;

    public Gripper() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        compressor = new Compressor(0);
        addChild("Compressor",compressor);
        
        
        gripper = new DoubleSolenoid(1, 0, 1);
        addChild("Gripper",gripper);
        
        
        armTalon = new WPI_TalonSRX(11);
        
        
        
        pusher = new Solenoid(1, 3);
        addChild("Pusher",pusher);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        compressor.setClosedLoopControl(true);
        // arm talon PID
        armTalon.setSensorPhase(true);
        armTalon.configSelectedFeedbackSensor(FeedbackDevice.Analog,0,4000);
        armTalon.clearStickyFaults();
        armTalon.config_kP(0, kP);
        armTalon.config_kI(0, kI);
        armTalon.config_kD(0, kD);
        armTalon.configReverseLimitSwitchSource(LimitSwitchSource.FeedbackConnector, LimitSwitchNormal.NormallyOpen);
        armTalon.configFeedbackNotContinuous(true,4000);
        armTalon.setInverted(false);
        armTalon.setNeutralMode(NeutralMode.Brake);
    }

    @Override
    public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        //setDefaultCommand(new ArmUpUntilLimit());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("ArmAngle",armTalon.getSensorCollection().getAnalogIn());
        SmartDashboard.putNumber("get selected sensor position",armTalon.getSelectedSensorPosition());
        SmartDashboard.putNumber("get Analog raw",armTalon.getSensorCollection().getAnalogInRaw());

        double tSet = SmartDashboard.getNumber("Test Setpoint", testSetpoint);
        SmartDashboard.putNumber("Test Setpoint", testSetpoint);
        if(tSet != testSetpoint){
            testSetpoint = tSet;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Base Gripper Methods
    public void gripperOpen(){
        gripper.set(Value.kReverse);
    }
    public void gripperClose(){
        gripper.set(Value.kForward);
    }
    public void gripperOff(){
        gripper.set(Value.kOff);
    }

    // Base Pusher Methods
    public void pusherOut(){
        pusher.set(true);
    }
    public void pusherIn(){
        pusher.set(false);
    }

    //Base Arm Methods
    //TODO Fix this for Talon
    public void armAngle(double angle){
        double angleSetpoint = (-1024.0/360.0 * angle) + potValue;
        armTalon.set(ControlMode.Position, -500);
    }
    // checking for limit state
    public boolean atLimit(){
        return armTalon.getSensorCollection().isFwdLimitSwitchClosed();
    }
    // getting pot value
    public void setPot(){
       potValue = armTalon.getSensorCollection().getAnalogInRaw();
    }

    public void armUp(){
        armTalon.set(ControlMode.PercentOutput, .25);
    }
    public void armDown(){
        armTalon.set(ControlMode.PercentOutput, -.25);
    }
    public void armStop(){
        armTalon.set(ControlMode.PercentOutput, 0);
    }
}

